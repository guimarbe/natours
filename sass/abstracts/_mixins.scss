/*	Función para arreglar las imágenes flotantes donde el padre tiene un alto
*	igual a 0. Con esto hacemos que el padre tenga el mismo alto que el hijo,
*	es decir, las imágenes en cuestión.
**/
@mixin clearfix {
	&::after {
		content: "";
		display: table;
		clear: both;
	}
}

/*	Función para centrar elementos en el medio del padre.
*/
@mixin absCenter {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

/*	Función para ocupar toda la pantalla o, en su defecto, todo el espacio
*	que ocupa el padre.
*/
@mixin full-viewport {
	position: absolute;
	top: 0;
	left: 0;
	height: 100%;
	width: 100%;
}

/* MEDIA QUERY MANAGER */
/*	0 - 600:	Phone
*	600 - 900:	Tablet portrait
*	900 - 1200:	Tablet landscape
*	> 1800:		Big Desktop
*
*	Variables válidas de $breakpoint:
*	- phone
*	- tab-port
*	- tab-land
*	- big-desktop
*
*	1em = 16px --> por ejemplo, para phone será: 600/16 = 37.5em
*	Es importante tenerlo en cuenta, ya que las @media queries solo funcionan
*	em (no rem). De esta forma, al cambiar el root font-size también cambian
*	los breakpoints de las @media queries.
*
*	ORDEN: Base + tipografía > layaout general + grid > páginas > componentes
**/

@mixin respond($breakpoint) {
	@if $breakpoint == phone {
		@media only screen and (max-width: 37.5em) { @content }; // 600px
	}
	@if $breakpoint == tab-port {
		@media only screen and (max-width: 56.25em) { @content }; // 900px
	}
	@if $breakpoint == tab-land {
		@media only screen and (max-width: 75em) { @content }; // 1200px
	}
	@if $breakpoint == big-desktop {
		@media only screen and (min-width: 112.5em) { @content }; //1800px
	}
	/*	Con @content pasamos todo el contenido de la llamada de la función y
	*	la devolvemos. No vamos a usar este ejemplo, si no la metodología siguiente.
	*/
}
